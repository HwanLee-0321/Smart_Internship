## 리플렉션: 2025년 7월 14일

### 변경 사항 요약

- `src/App14.jsx` 파일이 수정되었습니다.
- 영화 순위 테이블의 제목과 헤더에 "ㅋㅋ"가 추가되어 좀 더 유쾌한 느낌을 주도록 변경되었습니다.
- 테이블의 헤더(`<thead>`)와 각 행(`<tr>`)의 텍스트가 가운데 정렬되도록 스타일이 추가되었습니다.
- 테이블 헤더의 텍스트는 굵게 표시되도록 스타일이 추가되었습니다.

### 잘된 점

- 사용자의 "알록달록하게"라는 다소 추상적인 요구사항을 `getRandomColor` 함수를 통해 각 행의 배경색을 다르게 설정하는 방식으로 구체화하여 구현했습니다. 이는 동적으로 다채로운 UI를 생성하는 좋은 방법입니다.
- `axios`를 사용하여 외부 API(영화진흥위원회)로부터 데이터를 성공적으로 가져와 화면에 표시했습니다. 비동기 데이터 통신을 `useEffect`와 함께 효과적으로 사용했습니다.

### 아쉬운 점

- `getRandomColor` 함수가 생성하는 색상은 명도나 채도가 조절되지 않아 가독성이 떨어지는 색상(예: 너무 어둡거나 너무 밝은 색)이 배경으로 선택될 수 있습니다. 이로 인해 테이블의 텍스트를 읽기 어려울 수 있습니다.
- 스타일링이 JSX 파일 내에 인라인 스타일로 직접 추가되었습니다. 기능과 스타일이 혼합되어 있어 코드의 가독성과 유지보수성이 저하될 수 있습니다. 별도의 CSS 파일을 만들어 스타일을 분리하는 것이 더 좋은 접근 방식일 수 있습니다.

### 배운 점

- React 컴포넌트 내에서 동적으로 스타일을 적용하는 방법을 다시 한번 복습했습니다. 특히, `map` 함수를 사용하여 목록을 렌더링할 때 각 항목에 고유하고 동적인 스타일(이 경우, 랜덤 색상)을 적용하는 방법을 익혔습니다.
- 외부 API 연동 시 발생할 수 있는 비동기 처리와 상태 관리의 중요성을 다시 한번 확인했습니다. `useEffect` 훅을 사용하여 컴포넌트가 마운트될 때 데이터를 가져오는 패턴은 React에서 매우 일반적이고 중요한 기술입니다.
- 사용자 경험(UX) 측면에서 가독성의 중요성을 깨달았습니다. 아무리 화려하고 다채로운 디자인이라도 정보 전달이라는 본연의 목적을 해치면 안 됩니다. 색상 선택 시에는 가독성을 고려한 색상 팔레트를 사용하거나, 배경색과 텍스트 색상의 명도 대비를 보장하는 로직을 추가하는 것이 필요합니다.