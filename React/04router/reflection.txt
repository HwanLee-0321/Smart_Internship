## **[수업 - 회고유형 A] 🤯 난, 무엇을 느끼고 얻었나? - 4Fs**

---

- **Fact (사실)**: 오늘 진행한 작업들은 다음과 같습니다.
    - React Router를 사용하여 `App3.jsx`에서 메인 라우팅 구조를 구현했습니다.
    - 동영상 배경과 `MovieList`로 연결되는 버튼을 포함한 `Home` 컴포넌트를 제작했습니다.
    - The Movie Database (TMDb) API를 연동하여 인기 영화 목록을 보여주는 `MovieList` 컴포넌트를 개발했습니다.
    - 영화 상세 페이지를 위한 `MovieDetail` 컴포넌트와 로딩 스피너 스타일이 포함된 `MovieDetail.css`를 추가했습니다.
    - `Home.css`, `MovieList.css`를 통해 각 컴포넌트의 시각적 디자인과 반응형 요소를 개선했습니다.

- **Finding (교훈)**:
    - React Router를 통해 SPA(단일 페이지 애플리케이션)에서 동적 라우팅을 관리하는 방법을 배웠습니다.
    - `useEffect`와 `useState` 훅을 사용하여 외부 API로부터 비동기적으로 데이터를 가져와 상태를 관리하고 화면에 렌더링하는 과정을 익혔습니다.
    - 컴포넌트별로 CSS 파일을 분리하여 스타일을 관리하는 것이 코드의 모듈성과 유지보수성을 높인다는 것을 깨달았습니다.
    - 로딩 인디케이터와 같은 UI 요소를 통해 사용자 경험을 향상시키는 것의 중요성을 알게 되었습니다.

- **Feeling (느낌)**:
    - 라우팅과 API 연동을 통해 정적인 페이지에서 벗어나 동적인 애플리케이션을 직접 구현해보니 큰 성취감을 느꼈습니다.
    - 처음에는 막막했던 기능들을 하나씩 완성해가면서 프로그래밍에 대한 자신감이 붙었고, 다음 기능을 구현하는 것에 대한 기대감이 생겼습니다.

- **Future action (향후 계획)**:
    - `MovieDetail` 컴포넌트에 실제 영화 상세 데이터를 연동하여 동적으로 정보를 표시하는 기능을 구현할 것입니다.
    - 현재 코드에 하드코딩된 API 키를 `.env` 파일을 사용하여 환경 변수로 안전하게 관리하도록 리팩토링할 계획입니다.
    - API 요청 실패나 데이터가 없는 경우에 대한 에러 핸들링 로직을 추가하여 애플리케이션의 안정성을 높일 것입니다.
    - CSS 관리의 효율성을 높이기 위해 CSS 모듈 또는 Styled-components와 같은 스타일링 라이브러리 도입을 검토해봐야겠습니다.
